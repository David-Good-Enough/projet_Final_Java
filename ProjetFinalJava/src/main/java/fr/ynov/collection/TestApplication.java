package fr.ynov.collection;

import fr.ynov.collection.model.JeuVideo;
import fr.ynov.collection.model.Support;
import fr.ynov.collection.repository.JeuVideoDao;
import fr.ynov.collection.repository.SupportDao;
import fr.ynov.collection.utils.HibernateUtil;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

import java.util.List;

/**
 * Classe de test pour v√©rifier rapidement les fonctionnalit√©s de base
 * √Ä ex√©cuter avant de lancer l'application JavaFX
 */
public class TestApplication {
    
    public static void main(String[] args) {
        System.out.println("üß™ Test de l'application Gestionnaire de Collection de Jeux Vid√©o");
        System.out.println("=" .repeat(60));
        
        try {
            // Test 1: Initialisation Hibernate
            testHibernateInitialization();
            
            // Test 2: Gestion des supports
            testSupportManagement();
            
            // Test 3: CRUD des jeux vid√©o
            testJeuVideoCRUD();
            
            // Test 4: Recherche et filtrage
            testSearchAndFilter();
            
            System.out.println("\nüéâ Tous les tests sont pass√©s avec succ√®s !");
            System.out.println("‚úÖ L'application est pr√™te √† √™tre lanc√©e.");
            
        } catch (Exception e) {
            System.err.println("\n‚ùå Erreur lors des tests :");
            e.printStackTrace();
        } finally {
            // Fermer Hibernate
            HibernateUtil.shutdown();
        }
    }
    
    private static void testHibernateInitialization() {
        System.out.println("\n1Ô∏è‚É£ Test d'initialisation d'Hibernate...");
        
        SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
        Session session = sessionFactory.openSession();
        
        System.out.println("‚úÖ SessionFactory cr√©√©e avec succ√®s");
        System.out.println("‚úÖ Session ouverte avec succ√®s");
        
        session.close();
        System.out.println("‚úÖ Session ferm√©e avec succ√®s");
    }
    
    private static void testSupportManagement() {
        System.out.println("\n2Ô∏è‚É£ Test de gestion des supports...");
        
        SupportDao supportDao = new SupportDao();
        
        // Initialiser les supports par d√©faut
        supportDao.initializeDefaultSupports();
        System.out.println("‚úÖ Supports par d√©faut initialis√©s");
        
        // R√©cup√©rer tous les supports
        List<Support> supports = supportDao.findAll();
        System.out.println("‚úÖ " + supports.size() + " supports trouv√©s :");
        supports.forEach(support -> System.out.println("   - " + support.getNom()));
        
        // Tester la cr√©ation d'un nouveau support
        Support newSupport = supportDao.findOrCreateByNom("Test Support");
        System.out.println("‚úÖ Nouveau support cr√©√© : " + newSupport.getNom());
    }
    
    private static void testJeuVideoCRUD() {
        System.out.println("\n3Ô∏è‚É£ Test CRUD des jeux vid√©o...");
        
        JeuVideoDao jeuVideoDao = new JeuVideoDao();
        SupportDao supportDao = new SupportDao();
        
        // R√©cup√©rer un support pour le test
        Support support = supportDao.findByNom("PC").orElse(supportDao.findAll().get(0));
        
        // Cr√©er un jeu de test
        JeuVideo testJeu = new JeuVideo();
        testJeu.setTitre("Jeu de Test");
        testJeu.setEditeur("√âditeur Test");
        testJeu.setDeveloppeur("D√©veloppeur Test");
        testJeu.setAnneeSortie(2024);
        testJeu.setSupport(support);
        testJeu.setNoteMetacritic(8.5);
        testJeu.setJaquette("https://example.com/test.jpg");
        
        // Test CREATE
        jeuVideoDao.save(testJeu);
        System.out.println("‚úÖ Jeu cr√©√© avec succ√®s (ID: " + testJeu.getId() + ")");
        
        // Test READ
        List<JeuVideo> jeux = jeuVideoDao.findAll();
        System.out.println("‚úÖ " + jeux.size() + " jeux trouv√©s dans la base");
        
        // Test UPDATE
        testJeu.setNoteMetacritic(9.0);
        jeuVideoDao.update(testJeu);
        System.out.println("‚úÖ Jeu mis √† jour avec succ√®s");
        
        // Test SEARCH
        List<JeuVideo> searchResults = jeuVideoDao.findByTitre("Test");
        System.out.println("‚úÖ Recherche par titre : " + searchResults.size() + " r√©sultat(s)");
        
        // Test DELETE
        jeuVideoDao.delete(testJeu);
        System.out.println("‚úÖ Jeu supprim√© avec succ√®s");
        
        // V√©rifier la suppression
        jeux = jeuVideoDao.findAll();
        System.out.println("‚úÖ " + jeux.size() + " jeux restants dans la base");
    }
    
    private static void testSearchAndFilter() {
        System.out.println("\n4Ô∏è‚É£ Test de recherche et filtrage...");
        
        JeuVideoDao jeuVideoDao = new JeuVideoDao();
        SupportDao supportDao = new SupportDao();
        
        // Cr√©er quelques jeux de test
        Support pcSupport = supportDao.findByNom("PC").orElse(supportDao.findAll().get(0));
        Support ps5Support = supportDao.findByNom("PS5").orElse(supportDao.findAll().get(0));
        
        // Jeu 1
        JeuVideo jeu1 = new JeuVideo("Zelda Test", "Nintendo", "Nintendo", 2023, pcSupport);
        jeu1.setNoteMetacritic(9.5);
        jeuVideoDao.save(jeu1);
        
        // Jeu 2
        JeuVideo jeu2 = new JeuVideo("God of War Test", "Sony", "Santa Monica", 2022, ps5Support);
        jeu2.setNoteMetacritic(9.0);
        jeuVideoDao.save(jeu2);
        
        // Jeu 3
        JeuVideo jeu3 = new JeuVideo("Mario Test", "Nintendo", "Nintendo", 2024, pcSupport);
        jeu3.setNoteMetacritic(8.5);
        jeuVideoDao.save(jeu3);
        
        System.out.println("‚úÖ 3 jeux de test cr√©√©s");
        
        // Test recherche par titre
        List<JeuVideo> zeldaResults = jeuVideoDao.findByTitre("Zelda");
        System.out.println("‚úÖ Recherche 'Zelda' : " + zeldaResults.size() + " r√©sultat(s)");
        
        // Test filtrage par support
        List<JeuVideo> pcResults = jeuVideoDao.findBySupport(pcSupport);
        System.out.println("‚úÖ Jeux sur PC : " + pcResults.size() + " r√©sultat(s)");
        
        // Test filtrage par ann√©e
        List<JeuVideo> year2023Results = jeuVideoDao.findByAnneeSortie(2023);
        System.out.println("‚úÖ Jeux de 2023 : " + year2023Results.size() + " r√©sultat(s)");
        
        // Test filtrage par note
        List<JeuVideo> highScoreResults = jeuVideoDao.findByNoteMetacriticMin(9.0);
        System.out.println("‚úÖ Jeux avec note ‚â• 9.0 : " + highScoreResults.size() + " r√©sultat(s)");
        
        // Test recherche avanc√©e
        List<JeuVideo> advancedResults = jeuVideoDao.searchAdvanced("Test", pcSupport, 2023, 2024, 9.0);
        System.out.println("‚úÖ Recherche avanc√©e : " + advancedResults.size() + " r√©sultat(s)");
        
        // Nettoyer les jeux de test
        jeuVideoDao.delete(jeu1);
        jeuVideoDao.delete(jeu2);
        jeuVideoDao.delete(jeu3);
        System.out.println("‚úÖ Jeux de test supprim√©s");
    }
} 